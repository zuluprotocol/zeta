// Code generated by MockGen. DO NOT EDIT.
// Source: code.zetaprotocol.io/vega/core/broker (interfaces: Interface)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	events "code.zetaprotocol.io/vega/core/events"
	broker "code.zetaprotocol.io/vega/libs/broker"
	gomock "github.com/golang/mock/gomock"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockInterface) Send(arg0 events.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send.
func (mr *MockInterfaceMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockInterface)(nil).Send), arg0)
}

// SendBatch mocks base method.
func (m *MockInterface) SendBatch(arg0 []events.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendBatch", arg0)
}

// SendBatch indicates an expected call of SendBatch.
func (mr *MockInterfaceMockRecorder) SendBatch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBatch", reflect.TypeOf((*MockInterface)(nil).SendBatch), arg0)
}

// SetStreaming mocks base method.
func (m *MockInterface) SetStreaming(arg0 bool) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStreaming", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// SetStreaming indicates an expected call of SetStreaming.
func (mr *MockInterfaceMockRecorder) SetStreaming(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStreaming", reflect.TypeOf((*MockInterface)(nil).SetStreaming), arg0)
}

// Subscribe mocks base method.
func (m *MockInterface) Subscribe(arg0 broker.Subscriber) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockInterfaceMockRecorder) Subscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockInterface)(nil).Subscribe), arg0)
}

// SubscribeBatch mocks base method.
func (m *MockInterface) SubscribeBatch(arg0 ...broker.Subscriber) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "SubscribeBatch", varargs...)
}

// SubscribeBatch indicates an expected call of SubscribeBatch.
func (mr *MockInterfaceMockRecorder) SubscribeBatch(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeBatch", reflect.TypeOf((*MockInterface)(nil).SubscribeBatch), arg0...)
}

// Unsubscribe mocks base method.
func (m *MockInterface) Unsubscribe(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe", arg0)
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockInterfaceMockRecorder) Unsubscribe(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockInterface)(nil).Unsubscribe), arg0)
}

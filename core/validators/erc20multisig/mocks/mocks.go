// Code generated by MockGen. DO NOT EDIT.
// Source: code.zetaprotocol.io/vega/core/validators/erc20multisig (interfaces: Witness,MultiSigOnChainVerifier,EthConfirmations,EthereumEventSource)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	types "code.zetaprotocol.io/vega/core/types"
	validators "code.zetaprotocol.io/vega/core/validators"
	gomock "github.com/golang/mock/gomock"
)

// MockWitness is a mock of Witness interface.
type MockWitness struct {
	ctrl     *gomock.Controller
	recorder *MockWitnessMockRecorder
}

// MockWitnessMockRecorder is the mock recorder for MockWitness.
type MockWitnessMockRecorder struct {
	mock *MockWitness
}

// NewMockWitness creates a new mock instance.
func NewMockWitness(ctrl *gomock.Controller) *MockWitness {
	mock := &MockWitness{ctrl: ctrl}
	mock.recorder = &MockWitnessMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWitness) EXPECT() *MockWitnessMockRecorder {
	return m.recorder
}

// RestoreResource mocks base method.
func (m *MockWitness) RestoreResource(arg0 validators.Resource, arg1 func(interface{}, bool)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreResource indicates an expected call of RestoreResource.
func (mr *MockWitnessMockRecorder) RestoreResource(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreResource", reflect.TypeOf((*MockWitness)(nil).RestoreResource), arg0, arg1)
}

// StartCheck mocks base method.
func (m *MockWitness) StartCheck(arg0 validators.Resource, arg1 func(interface{}, bool), arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartCheck", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartCheck indicates an expected call of StartCheck.
func (mr *MockWitnessMockRecorder) StartCheck(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCheck", reflect.TypeOf((*MockWitness)(nil).StartCheck), arg0, arg1, arg2)
}

// MockMultiSigOnChainVerifier is a mock of MultiSigOnChainVerifier interface.
type MockMultiSigOnChainVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockMultiSigOnChainVerifierMockRecorder
}

// MockMultiSigOnChainVerifierMockRecorder is the mock recorder for MockMultiSigOnChainVerifier.
type MockMultiSigOnChainVerifierMockRecorder struct {
	mock *MockMultiSigOnChainVerifier
}

// NewMockMultiSigOnChainVerifier creates a new mock instance.
func NewMockMultiSigOnChainVerifier(ctrl *gomock.Controller) *MockMultiSigOnChainVerifier {
	mock := &MockMultiSigOnChainVerifier{ctrl: ctrl}
	mock.recorder = &MockMultiSigOnChainVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMultiSigOnChainVerifier) EXPECT() *MockMultiSigOnChainVerifierMockRecorder {
	return m.recorder
}

// CheckSignerEvent mocks base method.
func (m *MockMultiSigOnChainVerifier) CheckSignerEvent(arg0 *types.SignerEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSignerEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckSignerEvent indicates an expected call of CheckSignerEvent.
func (mr *MockMultiSigOnChainVerifierMockRecorder) CheckSignerEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSignerEvent", reflect.TypeOf((*MockMultiSigOnChainVerifier)(nil).CheckSignerEvent), arg0)
}

// CheckThresholdSetEvent mocks base method.
func (m *MockMultiSigOnChainVerifier) CheckThresholdSetEvent(arg0 *types.SignerThresholdSetEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckThresholdSetEvent", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckThresholdSetEvent indicates an expected call of CheckThresholdSetEvent.
func (mr *MockMultiSigOnChainVerifierMockRecorder) CheckThresholdSetEvent(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckThresholdSetEvent", reflect.TypeOf((*MockMultiSigOnChainVerifier)(nil).CheckThresholdSetEvent), arg0)
}

// MockEthConfirmations is a mock of EthConfirmations interface.
type MockEthConfirmations struct {
	ctrl     *gomock.Controller
	recorder *MockEthConfirmationsMockRecorder
}

// MockEthConfirmationsMockRecorder is the mock recorder for MockEthConfirmations.
type MockEthConfirmationsMockRecorder struct {
	mock *MockEthConfirmations
}

// NewMockEthConfirmations creates a new mock instance.
func NewMockEthConfirmations(ctrl *gomock.Controller) *MockEthConfirmations {
	mock := &MockEthConfirmations{ctrl: ctrl}
	mock.recorder = &MockEthConfirmationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthConfirmations) EXPECT() *MockEthConfirmationsMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockEthConfirmations) Check(arg0 uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockEthConfirmationsMockRecorder) Check(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockEthConfirmations)(nil).Check), arg0)
}

// MockEthereumEventSource is a mock of EthereumEventSource interface.
type MockEthereumEventSource struct {
	ctrl     *gomock.Controller
	recorder *MockEthereumEventSourceMockRecorder
}

// MockEthereumEventSourceMockRecorder is the mock recorder for MockEthereumEventSource.
type MockEthereumEventSourceMockRecorder struct {
	mock *MockEthereumEventSource
}

// NewMockEthereumEventSource creates a new mock instance.
func NewMockEthereumEventSource(ctrl *gomock.Controller) *MockEthereumEventSource {
	mock := &MockEthereumEventSource{ctrl: ctrl}
	mock.recorder = &MockEthereumEventSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthereumEventSource) EXPECT() *MockEthereumEventSourceMockRecorder {
	return m.recorder
}

// UpdateMultisigControlStartingBlock mocks base method.
func (m *MockEthereumEventSource) UpdateMultisigControlStartingBlock(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateMultisigControlStartingBlock", arg0)
}

// UpdateMultisigControlStartingBlock indicates an expected call of UpdateMultisigControlStartingBlock.
func (mr *MockEthereumEventSourceMockRecorder) UpdateMultisigControlStartingBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMultisigControlStartingBlock", reflect.TypeOf((*MockEthereumEventSource)(nil).UpdateMultisigControlStartingBlock), arg0)
}
